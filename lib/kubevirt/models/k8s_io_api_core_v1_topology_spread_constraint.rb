=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  # TopologySpreadConstraint specifies how to spread matching pods among the given topology.
  class K8sIoApiCoreV1TopologySpreadConstraint
    attr_accessor :label_selector

    # MatchLabelKeys is a set of pod label keys to select the pods over which spreading will be calculated. The keys are used to lookup values from the incoming pod labels, those key-value labels are ANDed with labelSelector to select the group of existing pods over which spreading will be calculated for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector. MatchLabelKeys cannot be set when LabelSelector isn't set. Keys that don't exist in the incoming pod labels will be ignored. A null or empty list means only match against labelSelector.  This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
    attr_accessor :match_label_keys

    # MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. The global minimum is the minimum number of matching pods in an eligible domain or zero if the number of eligible domains is less than MinDomains. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 2/2/1: In this case, the global minimum is 1. | zone1 | zone2 | zone3 | |  P P  |  P P  |   P   | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2; scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
    attr_accessor :max_skew

    # MinDomains indicates a minimum number of eligible domains. When the number of eligible domains with matching topology keys is less than minDomains, Pod Topology Spread treats \"global minimum\" as 0, and then the calculation of Skew is performed. And when the number of eligible domains with matching topology keys equals or greater than minDomains, this value has no effect on scheduling. As a result, when the number of eligible domains is less than minDomains, scheduler won't schedule more than maxSkew Pods to those domains. If value is nil, the constraint behaves as if MinDomains is equal to 1. Valid values are integers greater than 0. When value is not nil, WhenUnsatisfiable must be DoNotSchedule.  For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same labelSelector spread as 2/2/2: | zone1 | zone2 | zone3 | |  P P  |  P P  |  P P  | The number of domains is less than 5(MinDomains), so \"global minimum\" is treated as 0. In this situation, new pod with the same labelSelector cannot be scheduled, because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones, it will violate MaxSkew.
    attr_accessor :min_domains

    # NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector when calculating pod topology spread skew. Options are: - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations. - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.  If this value is nil, the behavior is equivalent to the Honor policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.  Possible enum values:  - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.  - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.
    attr_accessor :node_affinity_policy

    # NodeTaintsPolicy indicates how we will treat node taints when calculating pod topology spread skew. Options are: - Honor: nodes without taints, along with tainted nodes for which the incoming pod has a toleration, are included. - Ignore: node taints are ignored. All nodes are included.  If this value is nil, the behavior is equivalent to the Ignore policy. This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.  Possible enum values:  - `\"Honor\"` means use this scheduling directive when calculating pod topology spread skew.  - `\"Ignore\"` means ignore this scheduling directive when calculating pod topology spread skew.
    attr_accessor :node_taints_policy

    # TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a \"bucket\", and try to put balanced number of pods into each bucket. We define a domain as a particular instance of a topology. Also, we define an eligible domain as a domain whose nodes meet the requirements of nodeAffinityPolicy and nodeTaintsPolicy. e.g. If TopologyKey is \"kubernetes.io/hostname\", each Node is a domain of that topology. And, if TopologyKey is \"topology.kubernetes.io/zone\", each zone is a domain of that topology. It's a required field.
    attr_accessor :topology_key

    # WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.  Possible enum values:  - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.  - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.
    attr_accessor :when_unsatisfiable

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'label_selector' => :'labelSelector',
        :'match_label_keys' => :'matchLabelKeys',
        :'max_skew' => :'maxSkew',
        :'min_domains' => :'minDomains',
        :'node_affinity_policy' => :'nodeAffinityPolicy',
        :'node_taints_policy' => :'nodeTaintsPolicy',
        :'topology_key' => :'topologyKey',
        :'when_unsatisfiable' => :'whenUnsatisfiable'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'label_selector' => :'K8sIoApimachineryPkgApisMetaV1LabelSelector',
        :'match_label_keys' => :'Array<String>',
        :'max_skew' => :'Integer',
        :'min_domains' => :'Integer',
        :'node_affinity_policy' => :'String',
        :'node_taints_policy' => :'String',
        :'topology_key' => :'String',
        :'when_unsatisfiable' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::K8sIoApiCoreV1TopologySpreadConstraint` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::K8sIoApiCoreV1TopologySpreadConstraint`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'label_selector')
        self.label_selector = attributes[:'label_selector']
      end

      if attributes.key?(:'match_label_keys')
        if (value = attributes[:'match_label_keys']).is_a?(Array)
          self.match_label_keys = value
        end
      end

      if attributes.key?(:'max_skew')
        self.max_skew = attributes[:'max_skew']
      else
        self.max_skew = 0
      end

      if attributes.key?(:'min_domains')
        self.min_domains = attributes[:'min_domains']
      end

      if attributes.key?(:'node_affinity_policy')
        self.node_affinity_policy = attributes[:'node_affinity_policy']
      end

      if attributes.key?(:'node_taints_policy')
        self.node_taints_policy = attributes[:'node_taints_policy']
      end

      if attributes.key?(:'topology_key')
        self.topology_key = attributes[:'topology_key']
      else
        self.topology_key = ''
      end

      if attributes.key?(:'when_unsatisfiable')
        self.when_unsatisfiable = attributes[:'when_unsatisfiable']
      else
        self.when_unsatisfiable = ''
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @max_skew.nil?
        invalid_properties.push('invalid value for "max_skew", max_skew cannot be nil.')
      end

      if @topology_key.nil?
        invalid_properties.push('invalid value for "topology_key", topology_key cannot be nil.')
      end

      if @when_unsatisfiable.nil?
        invalid_properties.push('invalid value for "when_unsatisfiable", when_unsatisfiable cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @max_skew.nil?
      node_affinity_policy_validator = EnumAttributeValidator.new('String', ["Honor", "Ignore"])
      return false unless node_affinity_policy_validator.valid?(@node_affinity_policy)
      node_taints_policy_validator = EnumAttributeValidator.new('String', ["Honor", "Ignore"])
      return false unless node_taints_policy_validator.valid?(@node_taints_policy)
      return false if @topology_key.nil?
      return false if @when_unsatisfiable.nil?
      when_unsatisfiable_validator = EnumAttributeValidator.new('String', ["DoNotSchedule", "ScheduleAnyway"])
      return false unless when_unsatisfiable_validator.valid?(@when_unsatisfiable)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] max_skew Value to be assigned
    def max_skew=(max_skew)
      if max_skew.nil?
        fail ArgumentError, 'max_skew cannot be nil'
      end

      @max_skew = max_skew
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] node_affinity_policy Object to be assigned
    def node_affinity_policy=(node_affinity_policy)
      validator = EnumAttributeValidator.new('String', ["Honor", "Ignore"])
      unless validator.valid?(node_affinity_policy)
        fail ArgumentError, "invalid value for \"node_affinity_policy\", must be one of #{validator.allowable_values}."
      end
      @node_affinity_policy = node_affinity_policy
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] node_taints_policy Object to be assigned
    def node_taints_policy=(node_taints_policy)
      validator = EnumAttributeValidator.new('String', ["Honor", "Ignore"])
      unless validator.valid?(node_taints_policy)
        fail ArgumentError, "invalid value for \"node_taints_policy\", must be one of #{validator.allowable_values}."
      end
      @node_taints_policy = node_taints_policy
    end

    # Custom attribute writer method with validation
    # @param [Object] topology_key Value to be assigned
    def topology_key=(topology_key)
      if topology_key.nil?
        fail ArgumentError, 'topology_key cannot be nil'
      end

      @topology_key = topology_key
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] when_unsatisfiable Object to be assigned
    def when_unsatisfiable=(when_unsatisfiable)
      validator = EnumAttributeValidator.new('String', ["DoNotSchedule", "ScheduleAnyway"])
      unless validator.valid?(when_unsatisfiable)
        fail ArgumentError, "invalid value for \"when_unsatisfiable\", must be one of #{validator.allowable_values}."
      end
      @when_unsatisfiable = when_unsatisfiable
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          label_selector == o.label_selector &&
          match_label_keys == o.match_label_keys &&
          max_skew == o.max_skew &&
          min_domains == o.min_domains &&
          node_affinity_policy == o.node_affinity_policy &&
          node_taints_policy == o.node_taints_policy &&
          topology_key == o.topology_key &&
          when_unsatisfiable == o.when_unsatisfiable
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [label_selector, match_label_keys, max_skew, min_domains, node_affinity_policy, node_taints_policy, topology_key, when_unsatisfiable].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
