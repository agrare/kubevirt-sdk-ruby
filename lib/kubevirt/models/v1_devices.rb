=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  class V1Devices
    # Whether to attach the default graphics device or not. VNC will not be available if set to false. Defaults to true.
    attr_accessor :autoattach_graphics_device

    # Whether to attach an Input Device. Defaults to false.
    attr_accessor :autoattach_input_device

    # Whether to attach the Memory balloon device with default period. Period can be adjusted in virt-config. Defaults to true.
    attr_accessor :autoattach_mem_balloon

    # Whether to attach a pod network interface. Defaults to true.
    attr_accessor :autoattach_pod_interface

    # Whether to attach the default virtio-serial console or not. Serial console access will not be available if set to false. Defaults to true.
    attr_accessor :autoattach_serial_console

    # Whether to attach the VSOCK CID to the VM or not. VSOCK access will be available if set to true. Defaults to false.
    attr_accessor :autoattach_vsock

    # Whether or not to enable virtio multi-queue for block devices. Defaults to false.
    attr_accessor :block_multi_queue

    # Represent a subset of client devices that can be accessed by VMI. At the moment only, USB devices using Usbredir's library and tooling. Another fit would be a smartcard with libcacard.  The struct is currently empty as there is no immediate request for user-facing APIs. This structure simply turns on USB redirection of UsbClientPassthroughMaxNumberOf devices.
    attr_accessor :client_passthrough

    # DisableHotplug disabled the ability to hotplug disks.
    attr_accessor :disable_hotplug

    # Disks describes disks, cdroms and luns which are connected to the vmi.
    attr_accessor :disks

    attr_accessor :downward_metrics

    # Filesystems describes filesystem which is connected to the vmi.
    attr_accessor :filesystems

    # Whether to attach a GPU device to the vmi.
    attr_accessor :gpus

    # Whether to attach a host device to the vmi.
    attr_accessor :host_devices

    # Inputs describe input devices
    attr_accessor :inputs

    # Interfaces describe network interfaces which are added to the vmi.
    attr_accessor :interfaces

    # Whether to log the auto-attached default serial console or not. Serial console logs will be collect to a file and then streamed from a named `guest-console-log`. Not relevant if autoattachSerialConsole is disabled. Defaults to cluster wide setting on VirtualMachineOptions.
    attr_accessor :log_serial_console

    # If specified, virtual network interfaces configured with a virtio bus will also enable the vhost multiqueue feature for network devices. The number of queues created depends on additional factors of the VirtualMachineInstance, like the number of guest CPUs.
    attr_accessor :network_interface_multiqueue

    # Rng represents the random device passed from host
    attr_accessor :rng

    attr_accessor :sound

    attr_accessor :tpm

    # Fall back to legacy virtio 0.9 support if virtio bus is selected on devices. This is helpful for old machines like CentOS6 or RHEL6 which do not understand virtio_non_transitional (virtio 1.0).
    attr_accessor :use_virtio_transitional

    attr_accessor :watchdog

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'autoattach_graphics_device' => :'autoattachGraphicsDevice',
        :'autoattach_input_device' => :'autoattachInputDevice',
        :'autoattach_mem_balloon' => :'autoattachMemBalloon',
        :'autoattach_pod_interface' => :'autoattachPodInterface',
        :'autoattach_serial_console' => :'autoattachSerialConsole',
        :'autoattach_vsock' => :'autoattachVSOCK',
        :'block_multi_queue' => :'blockMultiQueue',
        :'client_passthrough' => :'clientPassthrough',
        :'disable_hotplug' => :'disableHotplug',
        :'disks' => :'disks',
        :'downward_metrics' => :'downwardMetrics',
        :'filesystems' => :'filesystems',
        :'gpus' => :'gpus',
        :'host_devices' => :'hostDevices',
        :'inputs' => :'inputs',
        :'interfaces' => :'interfaces',
        :'log_serial_console' => :'logSerialConsole',
        :'network_interface_multiqueue' => :'networkInterfaceMultiqueue',
        :'rng' => :'rng',
        :'sound' => :'sound',
        :'tpm' => :'tpm',
        :'use_virtio_transitional' => :'useVirtioTransitional',
        :'watchdog' => :'watchdog'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'autoattach_graphics_device' => :'Boolean',
        :'autoattach_input_device' => :'Boolean',
        :'autoattach_mem_balloon' => :'Boolean',
        :'autoattach_pod_interface' => :'Boolean',
        :'autoattach_serial_console' => :'Boolean',
        :'autoattach_vsock' => :'Boolean',
        :'block_multi_queue' => :'Boolean',
        :'client_passthrough' => :'Object',
        :'disable_hotplug' => :'Boolean',
        :'disks' => :'Array<V1Disk>',
        :'downward_metrics' => :'Object',
        :'filesystems' => :'Array<V1Filesystem>',
        :'gpus' => :'Array<V1GPU>',
        :'host_devices' => :'Array<V1HostDevice>',
        :'inputs' => :'Array<V1Input>',
        :'interfaces' => :'Array<V1Interface>',
        :'log_serial_console' => :'Boolean',
        :'network_interface_multiqueue' => :'Boolean',
        :'rng' => :'Object',
        :'sound' => :'V1SoundDevice',
        :'tpm' => :'V1TPMDevice',
        :'use_virtio_transitional' => :'Boolean',
        :'watchdog' => :'V1Watchdog'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1Devices` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1Devices`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'autoattach_graphics_device')
        self.autoattach_graphics_device = attributes[:'autoattach_graphics_device']
      end

      if attributes.key?(:'autoattach_input_device')
        self.autoattach_input_device = attributes[:'autoattach_input_device']
      end

      if attributes.key?(:'autoattach_mem_balloon')
        self.autoattach_mem_balloon = attributes[:'autoattach_mem_balloon']
      end

      if attributes.key?(:'autoattach_pod_interface')
        self.autoattach_pod_interface = attributes[:'autoattach_pod_interface']
      end

      if attributes.key?(:'autoattach_serial_console')
        self.autoattach_serial_console = attributes[:'autoattach_serial_console']
      end

      if attributes.key?(:'autoattach_vsock')
        self.autoattach_vsock = attributes[:'autoattach_vsock']
      end

      if attributes.key?(:'block_multi_queue')
        self.block_multi_queue = attributes[:'block_multi_queue']
      end

      if attributes.key?(:'client_passthrough')
        self.client_passthrough = attributes[:'client_passthrough']
      end

      if attributes.key?(:'disable_hotplug')
        self.disable_hotplug = attributes[:'disable_hotplug']
      end

      if attributes.key?(:'disks')
        if (value = attributes[:'disks']).is_a?(Array)
          self.disks = value
        end
      end

      if attributes.key?(:'downward_metrics')
        self.downward_metrics = attributes[:'downward_metrics']
      end

      if attributes.key?(:'filesystems')
        if (value = attributes[:'filesystems']).is_a?(Array)
          self.filesystems = value
        end
      end

      if attributes.key?(:'gpus')
        if (value = attributes[:'gpus']).is_a?(Array)
          self.gpus = value
        end
      end

      if attributes.key?(:'host_devices')
        if (value = attributes[:'host_devices']).is_a?(Array)
          self.host_devices = value
        end
      end

      if attributes.key?(:'inputs')
        if (value = attributes[:'inputs']).is_a?(Array)
          self.inputs = value
        end
      end

      if attributes.key?(:'interfaces')
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
      end

      if attributes.key?(:'log_serial_console')
        self.log_serial_console = attributes[:'log_serial_console']
      end

      if attributes.key?(:'network_interface_multiqueue')
        self.network_interface_multiqueue = attributes[:'network_interface_multiqueue']
      end

      if attributes.key?(:'rng')
        self.rng = attributes[:'rng']
      end

      if attributes.key?(:'sound')
        self.sound = attributes[:'sound']
      end

      if attributes.key?(:'tpm')
        self.tpm = attributes[:'tpm']
      end

      if attributes.key?(:'use_virtio_transitional')
        self.use_virtio_transitional = attributes[:'use_virtio_transitional']
      end

      if attributes.key?(:'watchdog')
        self.watchdog = attributes[:'watchdog']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          autoattach_graphics_device == o.autoattach_graphics_device &&
          autoattach_input_device == o.autoattach_input_device &&
          autoattach_mem_balloon == o.autoattach_mem_balloon &&
          autoattach_pod_interface == o.autoattach_pod_interface &&
          autoattach_serial_console == o.autoattach_serial_console &&
          autoattach_vsock == o.autoattach_vsock &&
          block_multi_queue == o.block_multi_queue &&
          client_passthrough == o.client_passthrough &&
          disable_hotplug == o.disable_hotplug &&
          disks == o.disks &&
          downward_metrics == o.downward_metrics &&
          filesystems == o.filesystems &&
          gpus == o.gpus &&
          host_devices == o.host_devices &&
          inputs == o.inputs &&
          interfaces == o.interfaces &&
          log_serial_console == o.log_serial_console &&
          network_interface_multiqueue == o.network_interface_multiqueue &&
          rng == o.rng &&
          sound == o.sound &&
          tpm == o.tpm &&
          use_virtio_transitional == o.use_virtio_transitional &&
          watchdog == o.watchdog
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [autoattach_graphics_device, autoattach_input_device, autoattach_mem_balloon, autoattach_pod_interface, autoattach_serial_console, autoattach_vsock, block_multi_queue, client_passthrough, disable_hotplug, disks, downward_metrics, filesystems, gpus, host_devices, inputs, interfaces, log_serial_console, network_interface_multiqueue, rng, sound, tpm, use_virtio_transitional, watchdog].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
