=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  # KubeVirtConfiguration holds all kubevirt configurations
  class V1KubeVirtConfiguration
    # AdditionalGuestMemoryOverheadRatio can be used to increase the virtualization infrastructure overhead. This is useful, since the calculation of this overhead is not accurate and cannot be entirely known in advance. The ratio that is being set determines by which factor to increase the overhead calculated by Kubevirt. A higher ratio means that the VMs would be less compromised by node pressures, but would mean that fewer VMs could be scheduled to a node. If not set, the default is 1.
    attr_accessor :additional_guest_memory_overhead_ratio

    attr_accessor :api_configuration

    attr_accessor :architecture_configuration

    attr_accessor :auto_cpu_limit_namespace_label_selector

    attr_accessor :common_instancetypes_deployment

    attr_accessor :controller_configuration

    attr_accessor :cpu_model

    # Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and AsInt64() accessors.  The serialization format is:  ``` <quantity>        ::= <signedNumber><suffix>   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)  <digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \"+\" | \"-\" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei   (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)  <decimalSI>       ::= m | \"\" | k | M | G | T | P | E   (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)  <decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber> ```  No matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.  When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.  Before serializing, Quantity will be put in \"canonical form\". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:  - No precision is lost - No fractional digits will be emitted - The exponent (or suffix) is as large as possible.  The sign will be omitted unless the number is negative.  Examples:  - 1.5 will be serialized as \"1500m\" - 1.5Gi will be serialized as \"1536Mi\"  Note that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.  Non-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)  This format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.
    attr_accessor :cpu_request

    attr_accessor :default_runtime_class

    attr_accessor :developer_configuration

    # Deprecated. Use architectureConfiguration instead.
    attr_accessor :emulated_machines

    # EvictionStrategy defines at the cluster level if the VirtualMachineInstance should be migrated instead of shut-off in case of a node drain. If the VirtualMachineInstance specific field is set it overrides the cluster level one.
    attr_accessor :eviction_strategy

    attr_accessor :handler_configuration

    # Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
    attr_accessor :image_pull_policy

    attr_accessor :instancetype

    attr_accessor :ksm_configuration

    attr_accessor :live_update_configuration

    # Deprecated. Use architectureConfiguration instead.
    attr_accessor :machine_type

    attr_accessor :mediated_devices_configuration

    attr_accessor :mem_balloon_stats_period

    attr_accessor :migrations

    attr_accessor :min_cpu_model

    attr_accessor :network

    attr_accessor :obsolete_cpu_models

    # Deprecated. Use architectureConfiguration instead.
    attr_accessor :ovmf_path

    attr_accessor :permitted_host_devices

    attr_accessor :seccomp_configuration

    attr_accessor :selinux_launcher_type

    attr_accessor :smbios

    # SupportContainerResources specifies the resource requirements for various types of supporting containers such as container disks/virtiofs/sidecars and hotplug attachment pods. If omitted a sensible default will be supplied.
    attr_accessor :support_container_resources

    # deprecated
    attr_accessor :supported_guest_agent_versions

    attr_accessor :tls_configuration

    attr_accessor :virtual_machine_instances_per_node

    attr_accessor :virtual_machine_options

    # VMRolloutStrategy defines how live-updatable fields, like CPU sockets, memory, tolerations, and affinity, are propagated from a VM to its VMI.
    attr_accessor :vm_rollout_strategy

    # VMStateStorageClass is the name of the storage class to use for the PVCs created to preserve VM state, like TPM.
    attr_accessor :vm_state_storage_class

    attr_accessor :webhook_configuration

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'additional_guest_memory_overhead_ratio' => :'additionalGuestMemoryOverheadRatio',
        :'api_configuration' => :'apiConfiguration',
        :'architecture_configuration' => :'architectureConfiguration',
        :'auto_cpu_limit_namespace_label_selector' => :'autoCPULimitNamespaceLabelSelector',
        :'common_instancetypes_deployment' => :'commonInstancetypesDeployment',
        :'controller_configuration' => :'controllerConfiguration',
        :'cpu_model' => :'cpuModel',
        :'cpu_request' => :'cpuRequest',
        :'default_runtime_class' => :'defaultRuntimeClass',
        :'developer_configuration' => :'developerConfiguration',
        :'emulated_machines' => :'emulatedMachines',
        :'eviction_strategy' => :'evictionStrategy',
        :'handler_configuration' => :'handlerConfiguration',
        :'image_pull_policy' => :'imagePullPolicy',
        :'instancetype' => :'instancetype',
        :'ksm_configuration' => :'ksmConfiguration',
        :'live_update_configuration' => :'liveUpdateConfiguration',
        :'machine_type' => :'machineType',
        :'mediated_devices_configuration' => :'mediatedDevicesConfiguration',
        :'mem_balloon_stats_period' => :'memBalloonStatsPeriod',
        :'migrations' => :'migrations',
        :'min_cpu_model' => :'minCPUModel',
        :'network' => :'network',
        :'obsolete_cpu_models' => :'obsoleteCPUModels',
        :'ovmf_path' => :'ovmfPath',
        :'permitted_host_devices' => :'permittedHostDevices',
        :'seccomp_configuration' => :'seccompConfiguration',
        :'selinux_launcher_type' => :'selinuxLauncherType',
        :'smbios' => :'smbios',
        :'support_container_resources' => :'supportContainerResources',
        :'supported_guest_agent_versions' => :'supportedGuestAgentVersions',
        :'tls_configuration' => :'tlsConfiguration',
        :'virtual_machine_instances_per_node' => :'virtualMachineInstancesPerNode',
        :'virtual_machine_options' => :'virtualMachineOptions',
        :'vm_rollout_strategy' => :'vmRolloutStrategy',
        :'vm_state_storage_class' => :'vmStateStorageClass',
        :'webhook_configuration' => :'webhookConfiguration'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'additional_guest_memory_overhead_ratio' => :'String',
        :'api_configuration' => :'V1ReloadableComponentConfiguration',
        :'architecture_configuration' => :'V1ArchConfiguration',
        :'auto_cpu_limit_namespace_label_selector' => :'K8sIoApimachineryPkgApisMetaV1LabelSelector',
        :'common_instancetypes_deployment' => :'V1CommonInstancetypesDeployment',
        :'controller_configuration' => :'V1ReloadableComponentConfiguration',
        :'cpu_model' => :'String',
        :'cpu_request' => :'Object',
        :'default_runtime_class' => :'String',
        :'developer_configuration' => :'V1DeveloperConfiguration',
        :'emulated_machines' => :'Array<String>',
        :'eviction_strategy' => :'String',
        :'handler_configuration' => :'V1ReloadableComponentConfiguration',
        :'image_pull_policy' => :'String',
        :'instancetype' => :'V1InstancetypeConfiguration',
        :'ksm_configuration' => :'V1KSMConfiguration',
        :'live_update_configuration' => :'V1LiveUpdateConfiguration',
        :'machine_type' => :'String',
        :'mediated_devices_configuration' => :'V1MediatedDevicesConfiguration',
        :'mem_balloon_stats_period' => :'Integer',
        :'migrations' => :'V1MigrationConfiguration',
        :'min_cpu_model' => :'String',
        :'network' => :'V1NetworkConfiguration',
        :'obsolete_cpu_models' => :'Hash<String, Boolean>',
        :'ovmf_path' => :'String',
        :'permitted_host_devices' => :'V1PermittedHostDevices',
        :'seccomp_configuration' => :'V1SeccompConfiguration',
        :'selinux_launcher_type' => :'String',
        :'smbios' => :'V1SMBiosConfiguration',
        :'support_container_resources' => :'Array<V1SupportContainerResources>',
        :'supported_guest_agent_versions' => :'Array<String>',
        :'tls_configuration' => :'V1TLSConfiguration',
        :'virtual_machine_instances_per_node' => :'Integer',
        :'virtual_machine_options' => :'V1VirtualMachineOptions',
        :'vm_rollout_strategy' => :'String',
        :'vm_state_storage_class' => :'String',
        :'webhook_configuration' => :'V1ReloadableComponentConfiguration'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1KubeVirtConfiguration` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1KubeVirtConfiguration`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'additional_guest_memory_overhead_ratio')
        self.additional_guest_memory_overhead_ratio = attributes[:'additional_guest_memory_overhead_ratio']
      end

      if attributes.key?(:'api_configuration')
        self.api_configuration = attributes[:'api_configuration']
      end

      if attributes.key?(:'architecture_configuration')
        self.architecture_configuration = attributes[:'architecture_configuration']
      end

      if attributes.key?(:'auto_cpu_limit_namespace_label_selector')
        self.auto_cpu_limit_namespace_label_selector = attributes[:'auto_cpu_limit_namespace_label_selector']
      end

      if attributes.key?(:'common_instancetypes_deployment')
        self.common_instancetypes_deployment = attributes[:'common_instancetypes_deployment']
      end

      if attributes.key?(:'controller_configuration')
        self.controller_configuration = attributes[:'controller_configuration']
      end

      if attributes.key?(:'cpu_model')
        self.cpu_model = attributes[:'cpu_model']
      end

      if attributes.key?(:'cpu_request')
        self.cpu_request = attributes[:'cpu_request']
      end

      if attributes.key?(:'default_runtime_class')
        self.default_runtime_class = attributes[:'default_runtime_class']
      end

      if attributes.key?(:'developer_configuration')
        self.developer_configuration = attributes[:'developer_configuration']
      end

      if attributes.key?(:'emulated_machines')
        if (value = attributes[:'emulated_machines']).is_a?(Array)
          self.emulated_machines = value
        end
      end

      if attributes.key?(:'eviction_strategy')
        self.eviction_strategy = attributes[:'eviction_strategy']
      end

      if attributes.key?(:'handler_configuration')
        self.handler_configuration = attributes[:'handler_configuration']
      end

      if attributes.key?(:'image_pull_policy')
        self.image_pull_policy = attributes[:'image_pull_policy']
      end

      if attributes.key?(:'instancetype')
        self.instancetype = attributes[:'instancetype']
      end

      if attributes.key?(:'ksm_configuration')
        self.ksm_configuration = attributes[:'ksm_configuration']
      end

      if attributes.key?(:'live_update_configuration')
        self.live_update_configuration = attributes[:'live_update_configuration']
      end

      if attributes.key?(:'machine_type')
        self.machine_type = attributes[:'machine_type']
      end

      if attributes.key?(:'mediated_devices_configuration')
        self.mediated_devices_configuration = attributes[:'mediated_devices_configuration']
      end

      if attributes.key?(:'mem_balloon_stats_period')
        self.mem_balloon_stats_period = attributes[:'mem_balloon_stats_period']
      end

      if attributes.key?(:'migrations')
        self.migrations = attributes[:'migrations']
      end

      if attributes.key?(:'min_cpu_model')
        self.min_cpu_model = attributes[:'min_cpu_model']
      end

      if attributes.key?(:'network')
        self.network = attributes[:'network']
      end

      if attributes.key?(:'obsolete_cpu_models')
        if (value = attributes[:'obsolete_cpu_models']).is_a?(Hash)
          self.obsolete_cpu_models = value
        end
      end

      if attributes.key?(:'ovmf_path')
        self.ovmf_path = attributes[:'ovmf_path']
      end

      if attributes.key?(:'permitted_host_devices')
        self.permitted_host_devices = attributes[:'permitted_host_devices']
      end

      if attributes.key?(:'seccomp_configuration')
        self.seccomp_configuration = attributes[:'seccomp_configuration']
      end

      if attributes.key?(:'selinux_launcher_type')
        self.selinux_launcher_type = attributes[:'selinux_launcher_type']
      end

      if attributes.key?(:'smbios')
        self.smbios = attributes[:'smbios']
      end

      if attributes.key?(:'support_container_resources')
        if (value = attributes[:'support_container_resources']).is_a?(Array)
          self.support_container_resources = value
        end
      end

      if attributes.key?(:'supported_guest_agent_versions')
        if (value = attributes[:'supported_guest_agent_versions']).is_a?(Array)
          self.supported_guest_agent_versions = value
        end
      end

      if attributes.key?(:'tls_configuration')
        self.tls_configuration = attributes[:'tls_configuration']
      end

      if attributes.key?(:'virtual_machine_instances_per_node')
        self.virtual_machine_instances_per_node = attributes[:'virtual_machine_instances_per_node']
      end

      if attributes.key?(:'virtual_machine_options')
        self.virtual_machine_options = attributes[:'virtual_machine_options']
      end

      if attributes.key?(:'vm_rollout_strategy')
        self.vm_rollout_strategy = attributes[:'vm_rollout_strategy']
      end

      if attributes.key?(:'vm_state_storage_class')
        self.vm_state_storage_class = attributes[:'vm_state_storage_class']
      end

      if attributes.key?(:'webhook_configuration')
        self.webhook_configuration = attributes[:'webhook_configuration']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      image_pull_policy_validator = EnumAttributeValidator.new('String', ["Always", "IfNotPresent", "Never"])
      return false unless image_pull_policy_validator.valid?(@image_pull_policy)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_pull_policy Object to be assigned
    def image_pull_policy=(image_pull_policy)
      validator = EnumAttributeValidator.new('String', ["Always", "IfNotPresent", "Never"])
      unless validator.valid?(image_pull_policy)
        fail ArgumentError, "invalid value for \"image_pull_policy\", must be one of #{validator.allowable_values}."
      end
      @image_pull_policy = image_pull_policy
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          additional_guest_memory_overhead_ratio == o.additional_guest_memory_overhead_ratio &&
          api_configuration == o.api_configuration &&
          architecture_configuration == o.architecture_configuration &&
          auto_cpu_limit_namespace_label_selector == o.auto_cpu_limit_namespace_label_selector &&
          common_instancetypes_deployment == o.common_instancetypes_deployment &&
          controller_configuration == o.controller_configuration &&
          cpu_model == o.cpu_model &&
          cpu_request == o.cpu_request &&
          default_runtime_class == o.default_runtime_class &&
          developer_configuration == o.developer_configuration &&
          emulated_machines == o.emulated_machines &&
          eviction_strategy == o.eviction_strategy &&
          handler_configuration == o.handler_configuration &&
          image_pull_policy == o.image_pull_policy &&
          instancetype == o.instancetype &&
          ksm_configuration == o.ksm_configuration &&
          live_update_configuration == o.live_update_configuration &&
          machine_type == o.machine_type &&
          mediated_devices_configuration == o.mediated_devices_configuration &&
          mem_balloon_stats_period == o.mem_balloon_stats_period &&
          migrations == o.migrations &&
          min_cpu_model == o.min_cpu_model &&
          network == o.network &&
          obsolete_cpu_models == o.obsolete_cpu_models &&
          ovmf_path == o.ovmf_path &&
          permitted_host_devices == o.permitted_host_devices &&
          seccomp_configuration == o.seccomp_configuration &&
          selinux_launcher_type == o.selinux_launcher_type &&
          smbios == o.smbios &&
          support_container_resources == o.support_container_resources &&
          supported_guest_agent_versions == o.supported_guest_agent_versions &&
          tls_configuration == o.tls_configuration &&
          virtual_machine_instances_per_node == o.virtual_machine_instances_per_node &&
          virtual_machine_options == o.virtual_machine_options &&
          vm_rollout_strategy == o.vm_rollout_strategy &&
          vm_state_storage_class == o.vm_state_storage_class &&
          webhook_configuration == o.webhook_configuration
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [additional_guest_memory_overhead_ratio, api_configuration, architecture_configuration, auto_cpu_limit_namespace_label_selector, common_instancetypes_deployment, controller_configuration, cpu_model, cpu_request, default_runtime_class, developer_configuration, emulated_machines, eviction_strategy, handler_configuration, image_pull_policy, instancetype, ksm_configuration, live_update_configuration, machine_type, mediated_devices_configuration, mem_balloon_stats_period, migrations, min_cpu_model, network, obsolete_cpu_models, ovmf_path, permitted_host_devices, seccomp_configuration, selinux_launcher_type, smbios, support_container_resources, supported_guest_agent_versions, tls_configuration, virtual_machine_instances_per_node, virtual_machine_options, vm_rollout_strategy, vm_state_storage_class, webhook_configuration].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
