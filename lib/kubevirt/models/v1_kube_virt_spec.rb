=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  class V1KubeVirtSpec
    attr_accessor :certificate_rotate_strategy

    attr_accessor :configuration

    attr_accessor :customize_components

    # The ImagePullPolicy to use.  Possible enum values:  - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.  - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.  - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present
    attr_accessor :image_pull_policy

    # The imagePullSecrets to pull the container images from Defaults to none
    attr_accessor :image_pull_secrets

    # The image registry to pull the container images from Defaults to the same registry the operator's container image is pulled from.
    attr_accessor :image_registry

    # The image tag to use for the continer images installed. Defaults to the same tag as the operator's container image.
    attr_accessor :image_tag

    attr_accessor :infra

    # The name of the Prometheus service account that needs read-access to KubeVirt endpoints Defaults to prometheus-k8s
    attr_accessor :monitor_account

    # The namespace Prometheus is deployed in Defaults to openshift-monitor
    attr_accessor :monitor_namespace

    # Designate the apps.kubevirt.io/component label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductComponent is not specified, the component label default value is kubevirt.
    attr_accessor :product_component

    # Designate the apps.kubevirt.io/part-of label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductName is not specified, the part-of label will be omitted.
    attr_accessor :product_name

    # Designate the apps.kubevirt.io/version label for KubeVirt components. Useful if KubeVirt is included as part of a product. If ProductVersion is not specified, KubeVirt's version will be used.
    attr_accessor :product_version

    # The namespace the service monitor will be deployed  When ServiceMonitorNamespace is set, then we'll install the service monitor object in that namespace otherwise we will use the monitoring namespace.
    attr_accessor :service_monitor_namespace

    # Specifies if kubevirt can be deleted if workloads are still present. This is mainly a precaution to avoid accidental data loss
    attr_accessor :uninstall_strategy

    attr_accessor :workload_update_strategy

    attr_accessor :workloads

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'certificate_rotate_strategy' => :'certificateRotateStrategy',
        :'configuration' => :'configuration',
        :'customize_components' => :'customizeComponents',
        :'image_pull_policy' => :'imagePullPolicy',
        :'image_pull_secrets' => :'imagePullSecrets',
        :'image_registry' => :'imageRegistry',
        :'image_tag' => :'imageTag',
        :'infra' => :'infra',
        :'monitor_account' => :'monitorAccount',
        :'monitor_namespace' => :'monitorNamespace',
        :'product_component' => :'productComponent',
        :'product_name' => :'productName',
        :'product_version' => :'productVersion',
        :'service_monitor_namespace' => :'serviceMonitorNamespace',
        :'uninstall_strategy' => :'uninstallStrategy',
        :'workload_update_strategy' => :'workloadUpdateStrategy',
        :'workloads' => :'workloads'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'certificate_rotate_strategy' => :'V1KubeVirtCertificateRotateStrategy',
        :'configuration' => :'V1KubeVirtConfiguration',
        :'customize_components' => :'V1CustomizeComponents',
        :'image_pull_policy' => :'String',
        :'image_pull_secrets' => :'Array<K8sIoApiCoreV1LocalObjectReference>',
        :'image_registry' => :'String',
        :'image_tag' => :'String',
        :'infra' => :'V1ComponentConfig',
        :'monitor_account' => :'String',
        :'monitor_namespace' => :'String',
        :'product_component' => :'String',
        :'product_name' => :'String',
        :'product_version' => :'String',
        :'service_monitor_namespace' => :'String',
        :'uninstall_strategy' => :'String',
        :'workload_update_strategy' => :'V1KubeVirtWorkloadUpdateStrategy',
        :'workloads' => :'V1ComponentConfig'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1KubeVirtSpec` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1KubeVirtSpec`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'certificate_rotate_strategy')
        self.certificate_rotate_strategy = attributes[:'certificate_rotate_strategy']
      end

      if attributes.key?(:'configuration')
        self.configuration = attributes[:'configuration']
      end

      if attributes.key?(:'customize_components')
        self.customize_components = attributes[:'customize_components']
      end

      if attributes.key?(:'image_pull_policy')
        self.image_pull_policy = attributes[:'image_pull_policy']
      end

      if attributes.key?(:'image_pull_secrets')
        if (value = attributes[:'image_pull_secrets']).is_a?(Array)
          self.image_pull_secrets = value
        end
      end

      if attributes.key?(:'image_registry')
        self.image_registry = attributes[:'image_registry']
      end

      if attributes.key?(:'image_tag')
        self.image_tag = attributes[:'image_tag']
      end

      if attributes.key?(:'infra')
        self.infra = attributes[:'infra']
      end

      if attributes.key?(:'monitor_account')
        self.monitor_account = attributes[:'monitor_account']
      end

      if attributes.key?(:'monitor_namespace')
        self.monitor_namespace = attributes[:'monitor_namespace']
      end

      if attributes.key?(:'product_component')
        self.product_component = attributes[:'product_component']
      end

      if attributes.key?(:'product_name')
        self.product_name = attributes[:'product_name']
      end

      if attributes.key?(:'product_version')
        self.product_version = attributes[:'product_version']
      end

      if attributes.key?(:'service_monitor_namespace')
        self.service_monitor_namespace = attributes[:'service_monitor_namespace']
      end

      if attributes.key?(:'uninstall_strategy')
        self.uninstall_strategy = attributes[:'uninstall_strategy']
      end

      if attributes.key?(:'workload_update_strategy')
        self.workload_update_strategy = attributes[:'workload_update_strategy']
      end

      if attributes.key?(:'workloads')
        self.workloads = attributes[:'workloads']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      image_pull_policy_validator = EnumAttributeValidator.new('String', ["Always", "IfNotPresent", "Never"])
      return false unless image_pull_policy_validator.valid?(@image_pull_policy)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] image_pull_policy Object to be assigned
    def image_pull_policy=(image_pull_policy)
      validator = EnumAttributeValidator.new('String', ["Always", "IfNotPresent", "Never"])
      unless validator.valid?(image_pull_policy)
        fail ArgumentError, "invalid value for \"image_pull_policy\", must be one of #{validator.allowable_values}."
      end
      @image_pull_policy = image_pull_policy
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          certificate_rotate_strategy == o.certificate_rotate_strategy &&
          configuration == o.configuration &&
          customize_components == o.customize_components &&
          image_pull_policy == o.image_pull_policy &&
          image_pull_secrets == o.image_pull_secrets &&
          image_registry == o.image_registry &&
          image_tag == o.image_tag &&
          infra == o.infra &&
          monitor_account == o.monitor_account &&
          monitor_namespace == o.monitor_namespace &&
          product_component == o.product_component &&
          product_name == o.product_name &&
          product_version == o.product_version &&
          service_monitor_namespace == o.service_monitor_namespace &&
          uninstall_strategy == o.uninstall_strategy &&
          workload_update_strategy == o.workload_update_strategy &&
          workloads == o.workloads
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [certificate_rotate_strategy, configuration, customize_components, image_pull_policy, image_pull_secrets, image_registry, image_tag, infra, monitor_account, monitor_namespace, product_component, product_name, product_version, service_monitor_namespace, uninstall_strategy, workload_update_strategy, workloads].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
