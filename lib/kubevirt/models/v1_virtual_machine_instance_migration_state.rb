=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  class V1VirtualMachineInstanceMigrationState
    # Indicates that the migration has been requested to abort
    attr_accessor :abort_requested

    # Indicates the final status of the live migration abortion
    attr_accessor :abort_status

    # Indicates the migration completed
    attr_accessor :completed

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :end_timestamp

    # Indicates that the migration failed
    attr_accessor :failed

    # Contains the reason why the migration failed
    attr_accessor :failure_reason

    attr_accessor :migration_configuration

    # Name of the migration policy. If string is empty, no policy is matched
    attr_accessor :migration_policy_name

    # The VirtualMachineInstanceMigration object associated with this migration
    attr_accessor :migration_uid

    # Lets us know if the vmi is currently running pre or post copy migration
    attr_accessor :mode

    # The source node that the VMI originated on
    attr_accessor :source_node

    # If the VMI being migrated uses persistent features (backend-storage), its source PVC name is saved here
    attr_accessor :source_persistent_state_pvc_name

    attr_accessor :source_pod

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :start_timestamp

    # The UID of the target attachment pod for hotplug volumes
    attr_accessor :target_attachment_pod_uid

    # If the VMI requires dedicated CPUs, this field will hold the dedicated CPU set on the target node
    attr_accessor :target_cpu_set

    # The list of ports opened for live migration on the destination node
    attr_accessor :target_direct_migration_node_ports

    # The target node that the VMI is moving to
    attr_accessor :target_node

    # The address of the target node to use for the migration
    attr_accessor :target_node_address

    # The Target Node has seen the Domain Start Event
    attr_accessor :target_node_domain_detected

    # Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.
    attr_accessor :target_node_domain_ready_timestamp

    # If the VMI requires dedicated CPUs, this field will hold the numa topology on the target node
    attr_accessor :target_node_topology

    # If the VMI being migrated uses persistent features (backend-storage), its target PVC name is saved here
    attr_accessor :target_persistent_state_pvc_name

    # The target pod that the VMI is moving to
    attr_accessor :target_pod

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'abort_requested' => :'abortRequested',
        :'abort_status' => :'abortStatus',
        :'completed' => :'completed',
        :'end_timestamp' => :'endTimestamp',
        :'failed' => :'failed',
        :'failure_reason' => :'failureReason',
        :'migration_configuration' => :'migrationConfiguration',
        :'migration_policy_name' => :'migrationPolicyName',
        :'migration_uid' => :'migrationUid',
        :'mode' => :'mode',
        :'source_node' => :'sourceNode',
        :'source_persistent_state_pvc_name' => :'sourcePersistentStatePVCName',
        :'source_pod' => :'sourcePod',
        :'start_timestamp' => :'startTimestamp',
        :'target_attachment_pod_uid' => :'targetAttachmentPodUID',
        :'target_cpu_set' => :'targetCPUSet',
        :'target_direct_migration_node_ports' => :'targetDirectMigrationNodePorts',
        :'target_node' => :'targetNode',
        :'target_node_address' => :'targetNodeAddress',
        :'target_node_domain_detected' => :'targetNodeDomainDetected',
        :'target_node_domain_ready_timestamp' => :'targetNodeDomainReadyTimestamp',
        :'target_node_topology' => :'targetNodeTopology',
        :'target_persistent_state_pvc_name' => :'targetPersistentStatePVCName',
        :'target_pod' => :'targetPod'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'abort_requested' => :'Boolean',
        :'abort_status' => :'String',
        :'completed' => :'Boolean',
        :'end_timestamp' => :'Time',
        :'failed' => :'Boolean',
        :'failure_reason' => :'String',
        :'migration_configuration' => :'V1MigrationConfiguration',
        :'migration_policy_name' => :'String',
        :'migration_uid' => :'String',
        :'mode' => :'String',
        :'source_node' => :'String',
        :'source_persistent_state_pvc_name' => :'String',
        :'source_pod' => :'String',
        :'start_timestamp' => :'Time',
        :'target_attachment_pod_uid' => :'String',
        :'target_cpu_set' => :'Array<Integer>',
        :'target_direct_migration_node_ports' => :'Hash<String, Integer>',
        :'target_node' => :'String',
        :'target_node_address' => :'String',
        :'target_node_domain_detected' => :'Boolean',
        :'target_node_domain_ready_timestamp' => :'Time',
        :'target_node_topology' => :'String',
        :'target_persistent_state_pvc_name' => :'String',
        :'target_pod' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1VirtualMachineInstanceMigrationState` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1VirtualMachineInstanceMigrationState`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'abort_requested')
        self.abort_requested = attributes[:'abort_requested']
      end

      if attributes.key?(:'abort_status')
        self.abort_status = attributes[:'abort_status']
      end

      if attributes.key?(:'completed')
        self.completed = attributes[:'completed']
      end

      if attributes.key?(:'end_timestamp')
        self.end_timestamp = attributes[:'end_timestamp']
      end

      if attributes.key?(:'failed')
        self.failed = attributes[:'failed']
      end

      if attributes.key?(:'failure_reason')
        self.failure_reason = attributes[:'failure_reason']
      end

      if attributes.key?(:'migration_configuration')
        self.migration_configuration = attributes[:'migration_configuration']
      end

      if attributes.key?(:'migration_policy_name')
        self.migration_policy_name = attributes[:'migration_policy_name']
      end

      if attributes.key?(:'migration_uid')
        self.migration_uid = attributes[:'migration_uid']
      end

      if attributes.key?(:'mode')
        self.mode = attributes[:'mode']
      end

      if attributes.key?(:'source_node')
        self.source_node = attributes[:'source_node']
      end

      if attributes.key?(:'source_persistent_state_pvc_name')
        self.source_persistent_state_pvc_name = attributes[:'source_persistent_state_pvc_name']
      end

      if attributes.key?(:'source_pod')
        self.source_pod = attributes[:'source_pod']
      end

      if attributes.key?(:'start_timestamp')
        self.start_timestamp = attributes[:'start_timestamp']
      end

      if attributes.key?(:'target_attachment_pod_uid')
        self.target_attachment_pod_uid = attributes[:'target_attachment_pod_uid']
      end

      if attributes.key?(:'target_cpu_set')
        if (value = attributes[:'target_cpu_set']).is_a?(Array)
          self.target_cpu_set = value
        end
      end

      if attributes.key?(:'target_direct_migration_node_ports')
        if (value = attributes[:'target_direct_migration_node_ports']).is_a?(Hash)
          self.target_direct_migration_node_ports = value
        end
      end

      if attributes.key?(:'target_node')
        self.target_node = attributes[:'target_node']
      end

      if attributes.key?(:'target_node_address')
        self.target_node_address = attributes[:'target_node_address']
      end

      if attributes.key?(:'target_node_domain_detected')
        self.target_node_domain_detected = attributes[:'target_node_domain_detected']
      end

      if attributes.key?(:'target_node_domain_ready_timestamp')
        self.target_node_domain_ready_timestamp = attributes[:'target_node_domain_ready_timestamp']
      end

      if attributes.key?(:'target_node_topology')
        self.target_node_topology = attributes[:'target_node_topology']
      end

      if attributes.key?(:'target_persistent_state_pvc_name')
        self.target_persistent_state_pvc_name = attributes[:'target_persistent_state_pvc_name']
      end

      if attributes.key?(:'target_pod')
        self.target_pod = attributes[:'target_pod']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          abort_requested == o.abort_requested &&
          abort_status == o.abort_status &&
          completed == o.completed &&
          end_timestamp == o.end_timestamp &&
          failed == o.failed &&
          failure_reason == o.failure_reason &&
          migration_configuration == o.migration_configuration &&
          migration_policy_name == o.migration_policy_name &&
          migration_uid == o.migration_uid &&
          mode == o.mode &&
          source_node == o.source_node &&
          source_persistent_state_pvc_name == o.source_persistent_state_pvc_name &&
          source_pod == o.source_pod &&
          start_timestamp == o.start_timestamp &&
          target_attachment_pod_uid == o.target_attachment_pod_uid &&
          target_cpu_set == o.target_cpu_set &&
          target_direct_migration_node_ports == o.target_direct_migration_node_ports &&
          target_node == o.target_node &&
          target_node_address == o.target_node_address &&
          target_node_domain_detected == o.target_node_domain_detected &&
          target_node_domain_ready_timestamp == o.target_node_domain_ready_timestamp &&
          target_node_topology == o.target_node_topology &&
          target_persistent_state_pvc_name == o.target_persistent_state_pvc_name &&
          target_pod == o.target_pod
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [abort_requested, abort_status, completed, end_timestamp, failed, failure_reason, migration_configuration, migration_policy_name, migration_uid, mode, source_node, source_persistent_state_pvc_name, source_pod, start_timestamp, target_attachment_pod_uid, target_cpu_set, target_direct_migration_node_ports, target_node, target_node_address, target_node_domain_detected, target_node_domain_ready_timestamp, target_node_topology, target_persistent_state_pvc_name, target_pod].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
