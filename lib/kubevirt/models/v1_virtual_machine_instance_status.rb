=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  # VirtualMachineInstanceStatus represents information about the status of a VirtualMachineInstance. Status may trail the actual state of a system.
  class V1VirtualMachineInstanceStatus
    # VSOCKCID is used to track the allocated VSOCK CID in the VM.
    attr_accessor :vsockcid

    # ActivePods is a mapping of pod UID to node name. It is possible for multiple pods to be running for a single VMI during migration.
    attr_accessor :active_pods

    # Conditions are specific points in VirtualMachineInstance's pod runtime.
    attr_accessor :conditions

    attr_accessor :current_cpu_topology

    # EvacuationNodeName is used to track the eviction process of a VMI. It stores the name of the node that we want to evacuate. It is meant to be used by KubeVirt core components only and can't be set or modified by users.
    attr_accessor :evacuation_node_name

    # FSFreezeStatus is the state of the fs of the guest it can be either frozen or thawed
    attr_accessor :fs_freeze_status

    attr_accessor :guest_os_info

    # Interfaces represent the details of available network interfaces.
    attr_accessor :interfaces

    attr_accessor :kernel_boot_status

    # LauncherContainerImageVersion indicates what container image is currently active for the vmi.
    attr_accessor :launcher_container_image_version

    attr_accessor :machine

    attr_accessor :memory

    # MigratedVolumes lists the source and destination volumes during the volume migration
    attr_accessor :migrated_volumes

    # Represents the method using which the vmi can be migrated: live migration or block migration
    attr_accessor :migration_method

    attr_accessor :migration_state

    # This represents the migration transport
    attr_accessor :migration_transport

    # NodeName is the name where the VirtualMachineInstance is currently running.
    attr_accessor :node_name

    # Phase is the status of the VirtualMachineInstance in kubernetes world. It is not the VirtualMachineInstance status, but partially correlates to it.
    attr_accessor :phase

    # PhaseTransitionTimestamp is the timestamp of when the last phase change occurred
    attr_accessor :phase_transition_timestamps

    # The Quality of Service (QOS) classification assigned to the virtual machine instance based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md  Possible enum values:  - `\"BestEffort\"` is the BestEffort qos class.  - `\"Burstable\"` is the Burstable qos class.  - `\"Guaranteed\"` is the Guaranteed qos class.
    attr_accessor :qos_class

    # A brief CamelCase message indicating details about why the VMI is in this state. e.g. 'NodeUnresponsive'
    attr_accessor :reason

    # RuntimeUser is used to determine what user will be used in launcher
    attr_accessor :runtime_user

    # SELinuxContext is the actual SELinux context of the virt-launcher pod
    attr_accessor :selinux_context

    attr_accessor :topology_hints

    # VirtualMachineRevisionName is used to get the vm revision of the vmi when doing an online vm snapshot
    attr_accessor :virtual_machine_revision_name

    # VolumeStatus contains the statuses of all the volumes
    attr_accessor :volume_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'vsockcid' => :'VSOCKCID',
        :'active_pods' => :'activePods',
        :'conditions' => :'conditions',
        :'current_cpu_topology' => :'currentCPUTopology',
        :'evacuation_node_name' => :'evacuationNodeName',
        :'fs_freeze_status' => :'fsFreezeStatus',
        :'guest_os_info' => :'guestOSInfo',
        :'interfaces' => :'interfaces',
        :'kernel_boot_status' => :'kernelBootStatus',
        :'launcher_container_image_version' => :'launcherContainerImageVersion',
        :'machine' => :'machine',
        :'memory' => :'memory',
        :'migrated_volumes' => :'migratedVolumes',
        :'migration_method' => :'migrationMethod',
        :'migration_state' => :'migrationState',
        :'migration_transport' => :'migrationTransport',
        :'node_name' => :'nodeName',
        :'phase' => :'phase',
        :'phase_transition_timestamps' => :'phaseTransitionTimestamps',
        :'qos_class' => :'qosClass',
        :'reason' => :'reason',
        :'runtime_user' => :'runtimeUser',
        :'selinux_context' => :'selinuxContext',
        :'topology_hints' => :'topologyHints',
        :'virtual_machine_revision_name' => :'virtualMachineRevisionName',
        :'volume_status' => :'volumeStatus'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'vsockcid' => :'Integer',
        :'active_pods' => :'Hash<String, String>',
        :'conditions' => :'Array<V1VirtualMachineInstanceCondition>',
        :'current_cpu_topology' => :'V1CPUTopology',
        :'evacuation_node_name' => :'String',
        :'fs_freeze_status' => :'String',
        :'guest_os_info' => :'V1VirtualMachineInstanceGuestOSInfo',
        :'interfaces' => :'Array<V1VirtualMachineInstanceNetworkInterface>',
        :'kernel_boot_status' => :'V1KernelBootStatus',
        :'launcher_container_image_version' => :'String',
        :'machine' => :'V1Machine',
        :'memory' => :'V1MemoryStatus',
        :'migrated_volumes' => :'Array<V1StorageMigratedVolumeInfo>',
        :'migration_method' => :'String',
        :'migration_state' => :'V1VirtualMachineInstanceMigrationState',
        :'migration_transport' => :'String',
        :'node_name' => :'String',
        :'phase' => :'String',
        :'phase_transition_timestamps' => :'Array<V1VirtualMachineInstancePhaseTransitionTimestamp>',
        :'qos_class' => :'String',
        :'reason' => :'String',
        :'runtime_user' => :'Integer',
        :'selinux_context' => :'String',
        :'topology_hints' => :'V1TopologyHints',
        :'virtual_machine_revision_name' => :'String',
        :'volume_status' => :'Array<V1VolumeStatus>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1VirtualMachineInstanceStatus` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1VirtualMachineInstanceStatus`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'vsockcid')
        self.vsockcid = attributes[:'vsockcid']
      end

      if attributes.key?(:'active_pods')
        if (value = attributes[:'active_pods']).is_a?(Hash)
          self.active_pods = value
        end
      end

      if attributes.key?(:'conditions')
        if (value = attributes[:'conditions']).is_a?(Array)
          self.conditions = value
        end
      end

      if attributes.key?(:'current_cpu_topology')
        self.current_cpu_topology = attributes[:'current_cpu_topology']
      end

      if attributes.key?(:'evacuation_node_name')
        self.evacuation_node_name = attributes[:'evacuation_node_name']
      end

      if attributes.key?(:'fs_freeze_status')
        self.fs_freeze_status = attributes[:'fs_freeze_status']
      end

      if attributes.key?(:'guest_os_info')
        self.guest_os_info = attributes[:'guest_os_info']
      end

      if attributes.key?(:'interfaces')
        if (value = attributes[:'interfaces']).is_a?(Array)
          self.interfaces = value
        end
      end

      if attributes.key?(:'kernel_boot_status')
        self.kernel_boot_status = attributes[:'kernel_boot_status']
      end

      if attributes.key?(:'launcher_container_image_version')
        self.launcher_container_image_version = attributes[:'launcher_container_image_version']
      end

      if attributes.key?(:'machine')
        self.machine = attributes[:'machine']
      end

      if attributes.key?(:'memory')
        self.memory = attributes[:'memory']
      end

      if attributes.key?(:'migrated_volumes')
        if (value = attributes[:'migrated_volumes']).is_a?(Array)
          self.migrated_volumes = value
        end
      end

      if attributes.key?(:'migration_method')
        self.migration_method = attributes[:'migration_method']
      end

      if attributes.key?(:'migration_state')
        self.migration_state = attributes[:'migration_state']
      end

      if attributes.key?(:'migration_transport')
        self.migration_transport = attributes[:'migration_transport']
      end

      if attributes.key?(:'node_name')
        self.node_name = attributes[:'node_name']
      end

      if attributes.key?(:'phase')
        self.phase = attributes[:'phase']
      end

      if attributes.key?(:'phase_transition_timestamps')
        if (value = attributes[:'phase_transition_timestamps']).is_a?(Array)
          self.phase_transition_timestamps = value
        end
      end

      if attributes.key?(:'qos_class')
        self.qos_class = attributes[:'qos_class']
      end

      if attributes.key?(:'reason')
        self.reason = attributes[:'reason']
      end

      if attributes.key?(:'runtime_user')
        self.runtime_user = attributes[:'runtime_user']
      else
        self.runtime_user = 0
      end

      if attributes.key?(:'selinux_context')
        self.selinux_context = attributes[:'selinux_context']
      end

      if attributes.key?(:'topology_hints')
        self.topology_hints = attributes[:'topology_hints']
      end

      if attributes.key?(:'virtual_machine_revision_name')
        self.virtual_machine_revision_name = attributes[:'virtual_machine_revision_name']
      end

      if attributes.key?(:'volume_status')
        if (value = attributes[:'volume_status']).is_a?(Array)
          self.volume_status = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      qos_class_validator = EnumAttributeValidator.new('String', ["BestEffort", "Burstable", "Guaranteed"])
      return false unless qos_class_validator.valid?(@qos_class)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] qos_class Object to be assigned
    def qos_class=(qos_class)
      validator = EnumAttributeValidator.new('String', ["BestEffort", "Burstable", "Guaranteed"])
      unless validator.valid?(qos_class)
        fail ArgumentError, "invalid value for \"qos_class\", must be one of #{validator.allowable_values}."
      end
      @qos_class = qos_class
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          vsockcid == o.vsockcid &&
          active_pods == o.active_pods &&
          conditions == o.conditions &&
          current_cpu_topology == o.current_cpu_topology &&
          evacuation_node_name == o.evacuation_node_name &&
          fs_freeze_status == o.fs_freeze_status &&
          guest_os_info == o.guest_os_info &&
          interfaces == o.interfaces &&
          kernel_boot_status == o.kernel_boot_status &&
          launcher_container_image_version == o.launcher_container_image_version &&
          machine == o.machine &&
          memory == o.memory &&
          migrated_volumes == o.migrated_volumes &&
          migration_method == o.migration_method &&
          migration_state == o.migration_state &&
          migration_transport == o.migration_transport &&
          node_name == o.node_name &&
          phase == o.phase &&
          phase_transition_timestamps == o.phase_transition_timestamps &&
          qos_class == o.qos_class &&
          reason == o.reason &&
          runtime_user == o.runtime_user &&
          selinux_context == o.selinux_context &&
          topology_hints == o.topology_hints &&
          virtual_machine_revision_name == o.virtual_machine_revision_name &&
          volume_status == o.volume_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [vsockcid, active_pods, conditions, current_cpu_topology, evacuation_node_name, fs_freeze_status, guest_os_info, interfaces, kernel_boot_status, launcher_container_image_version, machine, memory, migrated_volumes, migration_method, migration_state, migration_transport, node_name, phase, phase_transition_timestamps, qos_class, reason, runtime_user, selinux_context, topology_hints, virtual_machine_revision_name, volume_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
