=begin
#KubeVirt API

#This is KubeVirt API an add-on for Kubernetes.

The version of the OpenAPI document: 1.0.0
Contact: kubevirt-dev@googlegroups.com
Generated by: https://openapi-generator.tech
Generator version: 7.12.0

=end

require 'date'
require 'time'

module Kubevirt
  # Volume represents a named volume in a vmi.
  class V1Volume
    attr_accessor :cloud_init_config_drive

    attr_accessor :cloud_init_no_cloud

    attr_accessor :config_map

    attr_accessor :container_disk

    attr_accessor :data_volume

    attr_accessor :downward_api

    # DownwardMetricsVolumeSource adds a very small disk to VMIs which contains a limited view of host and guest metrics. The disk content is compatible with vhostmd (https://github.com/vhostmd/vhostmd) and vm-dump-metrics.
    attr_accessor :downward_metrics

    attr_accessor :empty_disk

    attr_accessor :ephemeral

    attr_accessor :host_disk

    attr_accessor :memory_dump

    # Volume's name. Must be a DNS_LABEL and unique within the vmi. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
    attr_accessor :name

    attr_accessor :persistent_volume_claim

    attr_accessor :secret

    attr_accessor :service_account

    attr_accessor :sysprep

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'cloud_init_config_drive' => :'cloudInitConfigDrive',
        :'cloud_init_no_cloud' => :'cloudInitNoCloud',
        :'config_map' => :'configMap',
        :'container_disk' => :'containerDisk',
        :'data_volume' => :'dataVolume',
        :'downward_api' => :'downwardAPI',
        :'downward_metrics' => :'downwardMetrics',
        :'empty_disk' => :'emptyDisk',
        :'ephemeral' => :'ephemeral',
        :'host_disk' => :'hostDisk',
        :'memory_dump' => :'memoryDump',
        :'name' => :'name',
        :'persistent_volume_claim' => :'persistentVolumeClaim',
        :'secret' => :'secret',
        :'service_account' => :'serviceAccount',
        :'sysprep' => :'sysprep'
      }
    end

    # Returns attribute mapping this model knows about
    def self.acceptable_attribute_map
      attribute_map
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      acceptable_attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'cloud_init_config_drive' => :'V1CloudInitConfigDriveSource',
        :'cloud_init_no_cloud' => :'V1CloudInitNoCloudSource',
        :'config_map' => :'V1ConfigMapVolumeSource',
        :'container_disk' => :'V1ContainerDiskSource',
        :'data_volume' => :'V1DataVolumeSource',
        :'downward_api' => :'V1DownwardAPIVolumeSource',
        :'downward_metrics' => :'Object',
        :'empty_disk' => :'V1EmptyDiskSource',
        :'ephemeral' => :'V1EphemeralVolumeSource',
        :'host_disk' => :'V1HostDisk',
        :'memory_dump' => :'V1MemoryDumpVolumeSource',
        :'name' => :'String',
        :'persistent_volume_claim' => :'V1PersistentVolumeClaimVolumeSource',
        :'secret' => :'V1SecretVolumeSource',
        :'service_account' => :'V1ServiceAccountVolumeSource',
        :'sysprep' => :'V1SysprepSource'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubevirt::V1Volume` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      acceptable_attribute_map = self.class.acceptable_attribute_map
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!acceptable_attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubevirt::V1Volume`. Please check the name to make sure it's valid. List of attributes: " + acceptable_attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'cloud_init_config_drive')
        self.cloud_init_config_drive = attributes[:'cloud_init_config_drive']
      end

      if attributes.key?(:'cloud_init_no_cloud')
        self.cloud_init_no_cloud = attributes[:'cloud_init_no_cloud']
      end

      if attributes.key?(:'config_map')
        self.config_map = attributes[:'config_map']
      end

      if attributes.key?(:'container_disk')
        self.container_disk = attributes[:'container_disk']
      end

      if attributes.key?(:'data_volume')
        self.data_volume = attributes[:'data_volume']
      end

      if attributes.key?(:'downward_api')
        self.downward_api = attributes[:'downward_api']
      end

      if attributes.key?(:'downward_metrics')
        self.downward_metrics = attributes[:'downward_metrics']
      end

      if attributes.key?(:'empty_disk')
        self.empty_disk = attributes[:'empty_disk']
      end

      if attributes.key?(:'ephemeral')
        self.ephemeral = attributes[:'ephemeral']
      end

      if attributes.key?(:'host_disk')
        self.host_disk = attributes[:'host_disk']
      end

      if attributes.key?(:'memory_dump')
        self.memory_dump = attributes[:'memory_dump']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      else
        self.name = ''
      end

      if attributes.key?(:'persistent_volume_claim')
        self.persistent_volume_claim = attributes[:'persistent_volume_claim']
      end

      if attributes.key?(:'secret')
        self.secret = attributes[:'secret']
      end

      if attributes.key?(:'service_account')
        self.service_account = attributes[:'service_account']
      end

      if attributes.key?(:'sysprep')
        self.sysprep = attributes[:'sysprep']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @name.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      @name = name
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          cloud_init_config_drive == o.cloud_init_config_drive &&
          cloud_init_no_cloud == o.cloud_init_no_cloud &&
          config_map == o.config_map &&
          container_disk == o.container_disk &&
          data_volume == o.data_volume &&
          downward_api == o.downward_api &&
          downward_metrics == o.downward_metrics &&
          empty_disk == o.empty_disk &&
          ephemeral == o.ephemeral &&
          host_disk == o.host_disk &&
          memory_dump == o.memory_dump &&
          name == o.name &&
          persistent_volume_claim == o.persistent_volume_claim &&
          secret == o.secret &&
          service_account == o.service_account &&
          sysprep == o.sysprep
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [cloud_init_config_drive, cloud_init_no_cloud, config_map, container_disk, data_volume, downward_api, downward_metrics, empty_disk, ephemeral, host_disk, memory_dump, name, persistent_volume_claim, secret, service_account, sysprep].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = Kubevirt.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
